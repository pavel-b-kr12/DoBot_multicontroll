
def setHOMEParam(self, x, y, z):
	dType.SetHOMEParams(self.DobotAPI, x, y, z, 0, isQueued=1)

def setHOME(self):
	dType.SetHOMECmd(self.DobotAPI, temp=0, isQueued=1)

def moveXYZ(self, x, y, z, r=0, mode="movl", sleep_sec=0.4):
	if self.production:
		ptp_mode = dType.PTPMode.PTPMOVLXYZMode
		if mode == 'jump':
			ptp_mode = dType.PTPMode.PTPJUMPXYZMode

		idx = dType.SetPTPCmd(self.DobotAPI, ptp_mode, x, y*Y_OFFSET, z, r, isQueued=1)[0]
		self.sleep(sleep_sec)
	else:
		print("try to move ({x}, {y}, {z})".format(x=x, y=y, z=z))
		idx = -1
	return idx

def getPose(self):
	if self.production:
		pose = dType.GetPose(self.DobotAPI)
		pose[1] = pose[1] / Y_OFFSET
	else:
		pose = [200, 0, 0]

	return pose[:3]


def startQueue(self):
	dType.SetQueuedCmdStartExec(self.DobotAPI)

def stopQueue(self):
	dType.SetQueuedCmdStopExec(self.DobotAPI)
	dType.SetQueuedCmdClear(self.DobotAPI)
	dType.SetQueuedCmdStartExec(self.DobotAPI)

def getCurrentIndex(self):
	return dType.GetQueuedCmdCurrentIndex(self.DobotAPI)

def getCurrentPosition(self):
	return

def sleep(self, s):
	if self.production:
		dType.dSleep(s)
